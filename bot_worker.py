# bot_worker.py
# Worker multiusuario: alta/baja, idioma, ciudad, ubicaci√≥n GPS y hora de env√≠o
# Bot worker multiusuario: escucha /start, /lang, /city, /when ‚Ä¶ y deja todo listo para el cron.
# Seguro frente a "event loop already running" en Railway.
# bot_worker.py  (python-telegram-bot v20+)
# Bot Telegram (polling) compatible con PTB 20.x y Railway.
# Gestiona altas y preferencias de cada usuario usando usuarios_repo.py

import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters

from usuarios_repo import (
    init_db, subscribe, unsubscribe, set_lang, set_city,
    set_location, set_send_hour, get_user, VALID_LANG
)

# Inicializamos DB
init_db()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN no configurado")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Mensajes pretraducidos
MESSAGES = {
    "welcome": {
        "es": "‚úÖ Suscripci√≥n confirmada.\nUsa /help para ver comandos.",
        "en": "‚úÖ Subscription confirmed.\nUse /help to see commands.",
        "fr": "‚úÖ Abonnement confirm√©.\nUtilisez /help pour voir les commandes.",
        "it": "‚úÖ Iscrizione confermata.\nUsa /help per vedere i comandi.",
        "de": "‚úÖ Anmeldung best√§tigt.\nVerwende /help, um Befehle zu sehen.",
        "pt": "‚úÖ Subscri√ß√£o confirmada.\nUse /help para ver os comandos.",
        "nl": "‚úÖ Abonnement bevestigd.\nGebruik /help om de commando's te zien.",
        "sr": "‚úÖ Pretplata potvrƒëena.\nKoristite /help da vidite komande.",
        "ru": "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã."
    },
    "help": {
        "es": "üìã Comandos disponibles:\n/sethour HH - Cambiar hora de env√≠o local\n/lang XX - Cambiar idioma (es, en, fr, it, de, pt, nl, sr, ru)\n/city Ciudad - Establecer ciudad\n/stop - Cancelar suscripci√≥n",
        "en": "üìã Available commands:\n/sethour HH - Change local send hour\n/lang XX - Change language (es, en, fr, it, de, pt, nl, sr, ru)\n/city City - Set city\n/stop - Unsubscribe",
        "fr": "üìã Commandes disponibles:\n/sethour HH - Changer l'heure locale d'envoi\n/lang XX - Changer la langue (es, en, fr, it, de, pt, nl, sr, ru)\n/city Ville - D√©finir la ville\n/stop - Se d√©sabonner",
        "it": "üìã Comandi disponibili:\n/sethour HH - Cambia ora di invio locale\n/lang XX - Cambia lingua (es, en, fr, it, de, pt, nl, sr, ru)\n/city Citt√† - Imposta citt√†\n/stop - Annulla iscrizione",
        "de": "üìã Verf√ºgbare Befehle:\n/sethour HH - Lokale Sendezeit √§ndern\n/lang XX - Sprache √§ndern (es, en, fr, it, de, pt, nl, sr, ru)\n/city Stadt - Stadt festlegen\n/stop - Abmelden",
        "pt": "üìã Comandos dispon√≠veis:\n/sethour HH - Alterar hora de envio local\n/lang XX - Alterar idioma (es, en, fr, it, de, pt, nl, sr, ru)\n/city Cidade - Definir cidade\n/stop - Cancelar subscri√ß√£o",
        "nl": "üìã Beschikbare commando's:\n/sethour HH - Lokale verzendtijd wijzigen\n/lang XX - Taal wijzigen (es, en, fr, it, de, pt, nl, sr, ru)\n/city Stad - Stad instellen\n/stop - Uitschrijven",
        "sr": "üìã Dostupne komande:\n/sethour HH - Promenite lokalno vreme slanja\n/lang XX - Promenite jezik (es, en, fr, it, de, pt, nl, sr, ru)\n/city Grad - Postavite grad\n/stop - Otka≈æite pretplatu",
        "ru": "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/sethour HH - –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n/lang XX - –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ (es, en, fr, it, de, pt, nl, sr, ru)\n/city –ì–æ—Ä–æ–¥ - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥\n/stop - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
    },
    "lang_set": {
        "es": "‚úÖ Idioma cambiado a Espa√±ol.",
        "en": "‚úÖ Language changed to English.",
        "fr": "‚úÖ Langue chang√©e en Fran√ßais.",
        "it": "‚úÖ Lingua cambiata in Italiano.",
        "de": "‚úÖ Sprache auf Deutsch ge√§ndert.",
        "pt": "‚úÖ Idioma alterado para Portugu√™s.",
        "nl": "‚úÖ Taal gewijzigd naar Nederlands.",
        "sr": "‚úÖ Jezik promenjen na srpski.",
        "ru": "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π."
    },
    "invalid_lang": {
        "es": "‚ùå Idioma no v√°lido. Opciones: es, en, fr, it, de, pt, nl, sr, ru",
        "en": "‚ùå Invalid language. Options: es, en, fr, it, de, pt, nl, sr, ru",
        "fr": "‚ùå Langue invalide. Options: es, en, fr, it, de, pt, nl, sr, ru",
        "it": "‚ùå Lingua non valida. Opzioni: es, en, fr, it, de, pt, nl, sr, ru",
        "de": "‚ùå Ung√ºltige Sprache. Optionen: es, en, fr, it, de, pt, nl, sr, ru",
        "pt": "‚ùå Idioma inv√°lido. Op√ß√µes: es, en, fr, it, de, pt, nl, sr, ru",
        "nl": "‚ùå Ongeldige taal. Opties: es, en, fr, it, de, pt, nl, sr, ru",
        "sr": "‚ùå Neva≈æeƒái jezik. Opcije: es, en, fr, it, de, pt, nl, sr, ru",
        "ru": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫. –í–∞—Ä–∏–∞–Ω—Ç—ã: es, en, fr, it, de, pt, nl, sr, ru"
    }
}

def detect_lang_from_user(user) -> str:
    if user.language_code:
        code = user.language_code.lower()
        if "-" in code:
            code = code.split("-")[0]
        if code in VALID_LANG:
            return code
        if code in ("sh", "sc", "srp", "hr", "bs"):
            return "sr"
        if code == "pt-br":
            return "pt"
    return "es"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    lang = detect_lang_from_user(update.effective_user)
    subscribe(chat_id)
    set_lang(chat_id, lang)
    await context.bot.send_message(chat_id=chat_id, text=MESSAGES["welcome"][lang])

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)
    lang = user.get("lang", "es")
    await context.bot.send_message(chat_id=chat_id, text=MESSAGES["help"][lang])

async def lang_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    args = context.args
    user = get_user(chat_id)
    current_lang = user.get("lang", "es")
    if not args:
        await context.bot.send_message(chat_id=chat_id, text=MESSAGES["invalid_lang"][current_lang])
        return
    new_lang = args[0].lower()
    if set_lang(chat_id, new_lang):
        await context.bot.send_message(chat_id=chat_id, text=MESSAGES["lang_set"][new_lang])
    else:
        await context.bot.send_message(chat_id=chat_id, text=MESSAGES["invalid_lang"][current_lang])

async def city_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    city_name = " ".join(context.args)
    set_city(chat_id, city_name)
    await context.bot.send_message(chat_id=chat_id, text=f"‚úÖ Ciudad establecida: {city_name}")

async def sethour_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    if not context.args:
        await context.bot.send_message(chat_id=chat_id, text="‚ùå Debes indicar la hora en formato HH (0-23).")
        return
    try:
        hour = int(context.args[0])
        set_send_hour(chat_id, hour)
        await context.bot.send_message(chat_id=chat_id, text=f"‚úÖ Hora de env√≠o local establecida a las {hour}:00.")
    except ValueError:
        await context.bot.send_message(chat_id=chat_id, text="‚ùå Formato no v√°lido. Usa un n√∫mero entre 0 y 23.")

async def stop_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    unsubscribe(chat_id)
    await context.bot.send_message(chat_id=chat_id, text="üõë Suscripci√≥n cancelada.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("lang", lang_cmd))
    app.add_handler(CommandHandler("city", city_cmd))
    app.add_handler(CommandHandler("sethour", sethour_cmd))
    app.add_handler(CommandHandler("stop", stop_cmd))
    app.run_polling()

if __name__ == "__main__":
    main()
